/*
 * Introduction to Java Thread
 * 
 * https://github.com/egalli64/jaco
 */
package com.example.jaco.m2.s06;

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.stream.Stream;

/**
 * ExecutorService::submit() for Callable
 */
public class SubmitCallableToExecutor {
    private static final int POOL_SIZE = 2;
    private static final int TASK_NR = 5;

    /**
     * Create a list of Futures, as generated by submit to an executor, then shutdown, then get the
     * result from each future. All the tasks are processed by the executor.
     * 
     * @param args not used
     * @throws Exception from Future::get()
     */
    public static void main(String[] args) throws Exception {
        System.out.printf("Fixed Thread Pool sized %d for %d tasks%n", POOL_SIZE, TASK_NR);
        ExecutorService es = Executors.newFixedThreadPool(POOL_SIZE);

        List<Future<Integer>> futures = Stream.generate(() -> es.submit(new Hello())).limit(TASK_NR).toList();
        es.shutdown();

        for (Future<Integer> future : futures) {
            System.out.println("Result " + future.get() + " delivered");
        }
    }
}