/*
 * Introduction to Java Thread
 * 
 * https://github.com/egalli64/jath
 */
package com.example.jath.m2.s05;

import java.util.concurrent.CompletableFuture;
import java.util.stream.DoubleStream;

/**
 * CompletableFuture::thenCompose()
 */
public class ThenCompose {
    /**
     * Compare use of thenApply and thenCompose when accepting functions that return a CompletableFuture
     * 
     * @param args not used
     * @throws Exception generated by CompletableFuture::get()
     */
    public static void main(String[] args) throws Exception {
        // It works, but it is overly complicated
        CompletableFuture<CompletableFuture<Integer>> applied = completable(10).thenApply(x -> completed(x));
        System.out.println("The result is: " + applied.get().get());

        // More readable and usable
        CompletableFuture<Integer> composed = completable(10).thenCompose(x -> completed(x));
        System.out.println("The result is: " + composed.get());
    }

    /**
     * A CompletableFuture generator
     * 
     * @param size size of the job
     * @return a completable future that generates a double
     */
    private static CompletableFuture<Double> completable(int size) {
        return CompletableFuture.supplyAsync( //
                () -> DoubleStream.generate(() -> Math.cbrt(Math.random())).limit(size).sum());
    }

    /**
     * A completed CompletableFuture generator
     * 
     * @param value a value
     * @return a completed CompletableFuture that generates an integer from the passed double
     */
    private static CompletableFuture<Integer> completed(double value) {
        return CompletableFuture.completedFuture((int) value);
    }
}
