/*
 * Introduction to Java Concurrency
 * 
 * https://github.com/egalli64/jaco
 */
package com.example.jaco.m4.s3;

import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.atomic.DoubleAdder;
import java.util.stream.Stream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.example.jaco.m1.s3.FakeTask;

/**
 * CyclicBarrier
 */
public class Barrier {
    private static final Logger log = LoggerFactory.getLogger(Barrier.class);
    public static final int TASK_NR = 3;

    /**
     * Create a CyclicBarrier for the workers and the main thread. Create a thread
     * for each worker and start them. Each worker does its job and waits on the
     * barrier.
     * <p>
     * The main thread wait for the barrier to break, then check for the result
     * generated by the workers.
     * 
     * @param args not used
     */
    public static void main(String[] args) {
        log.trace("Enter");
        // put workers and main thread on the barrier
        CyclicBarrier barrier = new CyclicBarrier(TASK_NR + 1, () -> log.info("Tripping!"));
        // an atomic double keeps the total
        DoubleAdder accumulator = new DoubleAdder();

        Runnable worker = () -> {
            log.trace("Enter");

            double value = FakeTask.adder(100);
            log.debug("Value is {}", value);
            accumulator.add(value);
            try {
                // the current worker thread waits on the barrier
                barrier.await();
            } catch (InterruptedException | BrokenBarrierException ex) {
                log.warn("Wait on barrier interrupted", ex);
            }

            log.trace("Exit");
        };

        // run the workers
        Stream.generate(() -> new Thread(worker)).limit(TASK_NR).forEach(Thread::start);

        try {
            // the main thread waits on the barrier
            barrier.await();
        } catch (InterruptedException | BrokenBarrierException ex) {
            log.warn("Wait on barrier interrupted", ex);
        }

        System.out.println("Total is " + accumulator.sum());
        log.trace("Exit");
    }
}
